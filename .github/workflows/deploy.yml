name: Deploy to Aliyun Server

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  APP_NAME: huitong-material
  DOCKER_IMAGE: huitong-material:latest

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Build application
      run: npm run build

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE }} .
        docker save ${{ env.DOCKER_IMAGE }} | gzip > ${{ env.APP_NAME }}.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: ${{ env.APP_NAME }}.tar.gz
        retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image

    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        REMOTE_PATH: /opt/${{ env.APP_NAME }}
      run: |
        # ‰∏ä‰º†Êñá‰ª∂Âà∞ÊúçÂä°Âô®
        scp ${{ env.APP_NAME }}.tar.gz ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.REMOTE_PATH }}/
        scp docker-compose.yml ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.REMOTE_PATH }}/
        scp nginx.conf ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.REMOTE_PATH }}/
        scp .env.production ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.REMOTE_PATH }}/.env
        
        # Âú®ÊúçÂä°Âô®‰∏äÊâßË°åÈÉ®ÁΩ≤
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          set -e
          cd ${{ env.REMOTE_PATH }}
          
          # ÂÅúÊ≠¢Áé∞ÊúâÊúçÂä°
          docker-compose down || true
          
          # Âä†ËΩΩÊñ∞ÈïúÂÉè
          docker load < ${{ env.APP_NAME }}.tar.gz
          
          # ÂàõÂª∫ÂøÖË¶ÅÁöÑÁõÆÂΩï
          mkdir -p backend/uploads
          mkdir -p prisma
          mkdir -p ssl
          
          # ÂàùÂßãÂåñÊï∞ÊçÆÂ∫ì
          docker run --rm -v $(pwd)/prisma:/app/prisma -v $(pwd)/.env:/app/.env ${{ env.DOCKER_IMAGE }} npx prisma db push || true
          
          # ÂêØÂä®ÊúçÂä°
          docker-compose up -d
          
          # Á≠âÂæÖÊúçÂä°ÂêØÂä®
          sleep 30
          
          # Ê£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ
          docker-compose ps
          
          # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
          rm -f ${{ env.APP_NAME }}.tar.gz
          
          echo "ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ"
        EOF

    - name: Verify deployment
      run: |
        sleep 10
        if curl -f http://${{ secrets.SERVER_HOST }}/health; then
          echo "‚úÖ ÈÉ®ÁΩ≤ÊàêÂäüÔºÅÂ∫îÁî®Ê≠£Âú®ËøêË°å"
        else
          echo "‚ö†Ô∏è Â∫îÁî®ÂèØËÉΩËøòÂú®ÂêØÂä®‰∏≠"
        fi

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ ÈÉ®ÁΩ≤ÊàêÂäüÔºÅ"
          echo "ËÆøÈóÆÂú∞ÂùÄ: http://${{ secrets.SERVER_HOST }}"
        else
          echo "‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•ÔºÅ"
        fi